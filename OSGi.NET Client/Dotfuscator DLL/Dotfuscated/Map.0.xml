<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.2.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2015-04-20T14:13:30</timestamp>
        <product version="4.10.2.2252" user="Danny Su" serial="1032-PRO-8E55B580-4489AB66-3412B76A-C2B22412">Dotfuscator Professional Edition</product>
    </header>
    <mapping>
        <module>
            <name>OSGi.NET.dll</name>
            <type>
                <name>OSGi.NET.Core.Bundle</name>
                <newname>d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.Root.IFramework, string, System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Mono.Cecil.AssemblyDefinition(string)</signature>
                        <name>&lt;LoadAssemblyFromLibDir&gt;b__11</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Extension.ExtensionPoint(string)</signature>
                        <name>&lt;LoadExtensions&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Extension.ExtensionData(System.Collections.Generic.KeyValuePair`2&lt;string,System.Collections.Generic.IList`1&lt;System.Xml.XmlNode&gt;&gt;)</signature>
                        <name>&lt;LoadExtensions&gt;b__3</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(OSGi.NET.Core.Bundle, OSGi.NET.Core.Bundle)</signature>
                        <name>&lt;LoadRequiredBundle&gt;b__e</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Reflection.Assembly, Mono.Cecil.AssemblyDefinition)</signature>
                        <name>AddRefAssembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleAssemblyFileName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleAssemblyFullName</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundleContext()</signature>
                        <name>GetBundleContext</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleDirectoryPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleFolderName</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.Bundle(string)</signature>
                        <name>GetBundleFromRequiredBundles</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleLibsDirectoryName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode()</signature>
                        <name>GetBundleManifestData</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(string)</signature>
                        <name>GetBundleRefAssembly</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>Mono.Cecil.AssemblyDefinition(string)</signature>
                        <name>GetBundleRefDefinition</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetBundleStartLevel</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionData&gt;()</signature>
                        <name>GetExtensionDatas</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionPoint&gt;()</signature>
                        <name>GetExtensionPoints</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;()</signature>
                        <name>GetManifest</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>GetRequireBundleList</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetState</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetSymbolicName</name>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>GetVersion</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadActivator</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>Mono.Cecil.AssemblyDefinition(string)</signature>
                        <name>LoadAssemblyFromLibDir</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadAssemblys</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadExtensions</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>LoadMetaData</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadRequiredBundle</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>System.Version(Mono.Cecil.AssemblyNameReference)</signature>
                        <name>MarkAssembleyVersion</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, string&amp;, string&amp;)</signature>
                        <name>ParseRequireBundleVersion</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveAllRefAssembly</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Resolve</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UnInstall</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UnLoadExtensions</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>activatorClass</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Core.IBundleActivator</signature>
                        <name>bundleActivator</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.Assembly</signature>
                        <name>bundleAssembly</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>bundleAssemblyFileName</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>bundleAssemblyFullName</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Core.IBundleContext</signature>
                        <name>bundleContext</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>bundleDirectoryPath</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,System.Reflection.Assembly&gt;</signature>
                        <name>bundleRefAssemblyDict</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,Mono.Cecil.AssemblyDefinition&gt;</signature>
                        <name>bundleRefDefinitionDict</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>bundleSymbolicName</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Version</signature>
                        <name>bundleVersion</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Comparison`1&lt;OSGi.NET.Core.Bundle&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatef</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionData&gt;</signature>
                        <name>extensionDatas</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionPoint&gt;</signature>
                        <name>extensionPoints</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Core.Root.IFramework</signature>
                        <name>framework</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>lastModified</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Xml.XmlNode</signature>
                        <name>manifestData</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;</signature>
                        <name>metaDataDictionary</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.Bundle&gt;</signature>
                        <name>requiredBundleList</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>state</name>
                        <newname>t</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Bundle/&lt;&gt;c__DisplayClass13</name>
                <newname>d/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;string,System.Reflection.Assembly&gt;)</signature>
                        <name>&lt;GetBundleRefAssembly&gt;b__12</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.AssemblyName</signature>
                        <name>refAssemblyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Bundle/&lt;&gt;c__DisplayClass16</name>
                <newname>d/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;string,Mono.Cecil.AssemblyDefinition&gt;)</signature>
                        <name>&lt;GetBundleRefDefinition&gt;b__15</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.AssemblyName</signature>
                        <name>refAssemblyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Bundle/&lt;&gt;c__DisplayClass1a</name>
                <newname>d/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Extension.ExtensionData)</signature>
                        <name>&lt;UnLoadExtensions&gt;b__18</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Extension.ExtensionPoint</signature>
                        <name>extensionPoint</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Bundle/&lt;&gt;c__DisplayClass9</name>
                <newname>d/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Extension.ExtensionData)</signature>
                        <name>&lt;LoadExtensions&gt;b__4</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Extension.ExtensionPoint</signature>
                        <name>extensionPoint</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Bundle/&lt;&gt;c__DisplayClassc</name>
                <newname>d/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Extension.ExtensionData)</signature>
                        <name>&lt;LoadExtensions&gt;b__5</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Extension.ExtensionPoint</signature>
                        <name>extensionPoint</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.BundleConst</name>
                <newname>a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_LIBS_DIRECTORY_NAME</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_MANIFEST_ACTIVATOR</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_MANIFEST_NAME</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_MANIFEST_REQUIRE_BUNDLE</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_MANIFEST_REQUIRED_BUNDLE_VERSION</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_MANIFEST_SYMBOLIC_NAME</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_MANIFEST_VENDOR</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_MANIFEST_VERSION</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.BundleContext</name>
                <newname>c</newname>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Core.Root.IFramework, OSGi.NET.Core.IBundle)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;OSGi.NET.Event.ExtensionEventArgs&gt;)</signature>
                        <name>add_ExtensionChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;OSGi.NET.Event.ServiceEventArgs&gt;)</signature>
                        <name>add_ServiceChanged</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IBundleListener)</signature>
                        <name>AddBundleListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IExtensionListener)</signature>
                        <name>AddExtensionListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IServiceListener)</signature>
                        <name>AddServiceListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle, OSGi.NET.Event.ExtensionEventArgs)</signature>
                        <name>FireExtensionChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle, OSGi.NET.Event.ServiceEventArgs)</signature>
                        <name>FireServiceChanged</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle(int32)</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle(string)</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;()</signature>
                        <name>GetBundles</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(OSGi.NET.Service.IServiceReference)</signature>
                        <name>GetService</name>
                    </method>
                    <method>
                        <signature>object(OSGi.NET.Service.IServiceReference)</signature>
                        <name>GetService</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>OSGi.NET.Service.IServiceReference()</signature>
                        <name>GetServiceReference</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceReference(string)</signature>
                        <name>GetServiceReference</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;()</signature>
                        <name>GetServiceReferences</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(string)</signature>
                        <name>GetServiceReferences</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(string, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>GetServiceReferences</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>GetServiceReferences</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;(OSGi.NET.Service.IServiceReference)</signature>
                        <name>GetUsingBundles</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle(string)</signature>
                        <name>InstallBundle</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>OSGi.NET.Service.IServiceRegistration(object, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>RegisterService</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceRegistration(string, object, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>RegisterService</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceRegistration(string[], object, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>RegisterService</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;OSGi.NET.Event.ExtensionEventArgs&gt;)</signature>
                        <name>remove_ExtensionChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;OSGi.NET.Event.ServiceEventArgs&gt;)</signature>
                        <name>remove_ServiceChanged</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IBundleListener)</signature>
                        <name>RemoveBundleListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IExtensionListener)</signature>
                        <name>RemoveExtensionListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IServiceListener)</signature>
                        <name>RemoveServiceListener</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Service.IServiceReference)</signature>
                        <name>UnGetService</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Service.IServiceReference)</signature>
                        <name>UnRegisterService</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Core.IBundle</signature>
                        <name>bundle</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Listener.IBundleListener&gt;</signature>
                        <name>bundleListenerList</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;</signature>
                        <name>bundleUsingServiceReferenceList</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;OSGi.NET.Event.ExtensionEventArgs&gt;</signature>
                        <name>ExtensionChanged</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Listener.IExtensionListener&gt;</signature>
                        <name>extensionListenerList</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Core.Root.IFramework</signature>
                        <name>framework</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;OSGi.NET.Event.ServiceEventArgs&gt;</signature>
                        <name>ServiceChanged</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Listener.IServiceListener&gt;</signature>
                        <name>serviceListenerList</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;</signature>
                        <name>serviceReferenceList</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.BundleContext/&lt;&gt;c__DisplayClass1</name>
                <newname>c/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Core.IBundle)</signature>
                        <name>&lt;GetBundle&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>assemblyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.BundleStateConst</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>ACTIVE</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>INSTALLED</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESOLVED</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>STARTING</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>STOPPING</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>UNINSTALLED</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.IBundle</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleAssemblyFileName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleAssemblyFullName</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundleContext()</signature>
                        <name>GetBundleContext</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleDirectoryPath</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode()</signature>
                        <name>GetBundleManifestData</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetBundleStartLevel</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionData&gt;()</signature>
                        <name>GetExtensionDatas</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionPoint&gt;()</signature>
                        <name>GetExtensionPoints</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;()</signature>
                        <name>GetManifest</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetState</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetSymbolicName</name>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>GetVersion</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UnInstall</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.IBundleActivator</name>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundleContext)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundleContext)</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.IBundleContext</name>
                <methodlist>
                    <method>
                        <signature>void(System.EventHandler`1&lt;OSGi.NET.Event.ExtensionEventArgs&gt;)</signature>
                        <name>add_ExtensionChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;OSGi.NET.Event.ServiceEventArgs&gt;)</signature>
                        <name>add_ServiceChanged</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IBundleListener)</signature>
                        <name>AddBundleListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IExtensionListener)</signature>
                        <name>AddExtensionListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IServiceListener)</signature>
                        <name>AddServiceListener</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle(int32)</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle(string)</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;()</signature>
                        <name>GetBundles</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(OSGi.NET.Service.IServiceReference)</signature>
                        <name>GetService</name>
                    </method>
                    <method>
                        <signature>object(OSGi.NET.Service.IServiceReference)</signature>
                        <name>GetService</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>OSGi.NET.Service.IServiceReference()</signature>
                        <name>GetServiceReference</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceReference(string)</signature>
                        <name>GetServiceReference</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;()</signature>
                        <name>GetServiceReferences</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(string)</signature>
                        <name>GetServiceReferences</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(string, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>GetServiceReferences</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>GetServiceReferences</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;(OSGi.NET.Service.IServiceReference)</signature>
                        <name>GetUsingBundles</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle(string)</signature>
                        <name>InstallBundle</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>OSGi.NET.Service.IServiceRegistration(object, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>RegisterService</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceRegistration(string, object, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>RegisterService</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceRegistration(string[], object, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>RegisterService</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;OSGi.NET.Event.ExtensionEventArgs&gt;)</signature>
                        <name>remove_ExtensionChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;OSGi.NET.Event.ServiceEventArgs&gt;)</signature>
                        <name>remove_ServiceChanged</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IBundleListener)</signature>
                        <name>RemoveBundleListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IExtensionListener)</signature>
                        <name>RemoveExtensionListener</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IServiceListener)</signature>
                        <name>RemoveServiceListener</name>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Service.IServiceReference)</signature>
                        <name>UnGetService</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Service.IServiceReference)</signature>
                        <name>UnRegisterService</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist>
                    <event>
                        <signature>System.EventHandler`1&lt;OSGi.NET.Event.ExtensionEventArgs&gt;</signature>
                        <name>ExtensionChanged</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;OSGi.NET.Event.ServiceEventArgs&gt;</signature>
                        <name>ServiceChanged</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>OSGi.NET.Core.Root.Framework</name>
                <newname>i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionData&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionPoint&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Extension.ExtensionPoint)</signature>
                        <name>&lt;.ctor&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Extension.ExtensionData)</signature>
                        <name>&lt;.ctor&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;LoadShareAssemblys&gt;b__4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IBundleListener)</signature>
                        <name>AddBundleListener</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IExtensionListener)</signature>
                        <name>AddExtensionListener</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IServiceListener)</signature>
                        <name>AddServiceListener</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle)</signature>
                        <name>Delete</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DiscoverBundles</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DomainAssemblyInsertShareLib</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Event.BundleEventArgs)</signature>
                        <name>FireBundleEvent</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Event.ExtensionEventArgs)</signature>
                        <name>FireExtensionEvent</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Event.ServiceEventArgs)</signature>
                        <name>FireServiceEvent</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleAssemblyFileName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleAssemblyFullName</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundleContext()</signature>
                        <name>GetBundleContext</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundleDirectoryPath</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode()</signature>
                        <name>GetBundleManifestData</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;()</signature>
                        <name>GetBundles</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetBundleStartLevel</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionData&gt;()</signature>
                        <name>GetExtensionDatas</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionPoint&gt;()</signature>
                        <name>GetExtensionPoints</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;()</signature>
                        <name>GetManifest</name>
                    </method>
                    <method>
                        <signature>object(OSGi.NET.Service.IServiceReference, OSGi.NET.Core.IBundle)</signature>
                        <name>GetService</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceReference(string)</signature>
                        <name>GetServiceReference</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(string)</signature>
                        <name>GetServiceReferences</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(string, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>GetServiceReferences</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetState</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetSymbolicName</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;(OSGi.NET.Service.IServiceReference)</signature>
                        <name>GetUsingBundles</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>GetVersion</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle(string)</signature>
                        <name>Install</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadMetaData</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>LoadShareAssemblyByReflect</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadShareAssemblys</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReadConfig</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceRegistration(OSGi.NET.Core.IBundleContext, string[], object, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>RegisterService</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IBundleListener)</signature>
                        <name>RemoveBundleListener</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IExtensionListener)</signature>
                        <name>RemoveExtensionListener</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IServiceListener)</signature>
                        <name>RemoveServiceListener</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Service.IServiceReference, OSGi.NET.Core.IBundle)</signature>
                        <name>UnGetService</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UnInstall</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle)</signature>
                        <name>UnInstall</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Service.IServiceReference)</signature>
                        <name>UnRegisterService</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Core.IBundleContext</signature>
                        <name>bundleContext</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;OSGi.NET.Core.IBundle&gt;</signature>
                        <name>bundleList</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Listener.IBundleListener&gt;</signature>
                        <name>bundleListenerList</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>bundlesDirectoryPath</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>bundlesUninstallPath</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionData&gt;</signature>
                        <name>extensionDatas</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Listener.IExtensionListener&gt;</signature>
                        <name>extensionListenerList</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionPoint&gt;</signature>
                        <name>extensionPoints</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FRAMEWORK_LOCK_FILE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>frameworkAssemblyFullName</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>frameworkSymbolicName</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Version</signature>
                        <name>frameworkVersion</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.IO.FileStream</signature>
                        <name>lockFileStream</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;</signature>
                        <name>metaDataDictionary</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Listener.IServiceListener&gt;</signature>
                        <name>serviceListenerList</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;&gt;</signature>
                        <name>serviceReferenceDictionary</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>shareLibsDirectoryPath</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>state</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;OSGi.NET.Service.IServiceReference,System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;&gt;</signature>
                        <name>usingServiceBundleDict</name>
                        <newname>n</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Root.Framework/&lt;&gt;c__DisplayClass8</name>
                <newname>i/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.Assembly)</signature>
                        <name>&lt;LoadShareAssemblyByReflect&gt;b__6</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Mono.Cecil.AssemblyDefinition</signature>
                        <name>assemblyDefinition</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Root.Framework/&lt;&gt;c__DisplayClassb</name>
                <newname>i/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Core.IBundle)</signature>
                        <name>&lt;DiscoverBundles&gt;b__a</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Core.IBundle</signature>
                        <name>bundle</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Root.FrameworkFactory</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.Root.IFramework()</signature>
                        <name>CreateFramework</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.Root.IFramework(System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionData&gt;)</signature>
                        <name>CreateFramework</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.Root.IFramework(System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionPoint&gt;)</signature>
                        <name>CreateFramework</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Root.IFramework</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;()</signature>
                        <name>GetBundles</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Root.IFrameworkFactory</name>
                <methodlist>
                    <method>
                        <signature>OSGi.NET.Core.Root.IFramework()</signature>
                        <name>CreateFramework</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.Root.IFramework(System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionData&gt;)</signature>
                        <name>CreateFramework</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.Root.IFramework(System.Collections.Generic.IList`1&lt;OSGi.NET.Extension.ExtensionPoint&gt;)</signature>
                        <name>CreateFramework</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Root.IFrameworkInstaller</name>
                <newname>e</newname>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle)</signature>
                        <name>Delete</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle(string)</signature>
                        <name>Install</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle)</signature>
                        <name>UnInstall</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Root.IFrameworkListener</name>
                <newname>f</newname>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Listener.IBundleListener)</signature>
                        <name>AddBundleListener</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IExtensionListener)</signature>
                        <name>AddExtensionListener</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IServiceListener)</signature>
                        <name>AddServiceListener</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IBundleListener)</signature>
                        <name>RemoveBundleListener</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IExtensionListener)</signature>
                        <name>RemoveExtensionListener</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Listener.IServiceListener)</signature>
                        <name>RemoveServiceListener</name>
                        <newname>m</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Core.Root.IFrameworkService</name>
                <newname>g</newname>
                <methodlist>
                    <method>
                        <signature>object(OSGi.NET.Service.IServiceReference, OSGi.NET.Core.IBundle)</signature>
                        <name>GetService</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceReference(string)</signature>
                        <name>GetServiceReference</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(string)</signature>
                        <name>GetServiceReferences</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Service.IServiceReference&gt;(string, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>GetServiceReferences</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;(OSGi.NET.Service.IServiceReference)</signature>
                        <name>GetUsingBundles</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceRegistration(OSGi.NET.Core.IBundleContext, string[], object, System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>RegisterService</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>bool(OSGi.NET.Service.IServiceReference, OSGi.NET.Core.IBundle)</signature>
                        <name>UnGetService</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Service.IServiceReference)</signature>
                        <name>UnRegisterService</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Event.BundleEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(int32, OSGi.NET.Core.IBundle)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetState</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Core.IBundle</signature>
                        <name>bundle</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>INSTALLED</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESOLVED</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>STARTED</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>STARTING</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>state</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>STOPPED</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>STOPPING</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Event.ExtensionEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(int32, OSGi.NET.Extension.ExtensionPoint, OSGi.NET.Extension.ExtensionData)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Extension.ExtensionData()</signature>
                        <name>GetExtensionData</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Extension.ExtensionPoint()</signature>
                        <name>GetExtensionPoint</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetState</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Extension.ExtensionData</signature>
                        <name>extensionData</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Extension.ExtensionPoint</signature>
                        <name>extensionPoint</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LOAD</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>state</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>UNLOAD</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Event.IContextFireEvent</name>
                <newname>b</newname>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle, OSGi.NET.Event.ExtensionEventArgs)</signature>
                        <name>FireExtensionChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle, OSGi.NET.Event.ServiceEventArgs)</signature>
                        <name>FireServiceChanged</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Event.IFrameworkFireEvent</name>
                <newname>h</newname>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Event.BundleEventArgs)</signature>
                        <name>FireBundleEvent</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Event.ExtensionEventArgs)</signature>
                        <name>FireExtensionEvent</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Event.ServiceEventArgs)</signature>
                        <name>FireServiceEvent</name>
                        <newname>n</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Event.ServiceEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(int32, string[], OSGi.NET.Service.IServiceReference)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetSercieContracts</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceReference()</signature>
                        <name>GetServiceReference</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetState</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string[]</signature>
                        <name>contracts</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Service.IServiceReference</signature>
                        <name>reference</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>REGISTERED</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>state</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>UNREGISTERING</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Extension.ExtensionData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;System.Xml.XmlNode&gt;()</signature>
                        <name>get_ExtensionList</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>get_Owner</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;System.Xml.XmlNode&gt;)</signature>
                        <name>set_ExtensionList</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle)</signature>
                        <name>set_Owner</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;System.Xml.XmlNode&gt;</signature>
                        <name>&lt;ExtensionList&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Core.IBundle</signature>
                        <name>&lt;Owner&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;System.Xml.XmlNode&gt;()</signature>
                        <name>ExtensionList</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>Owner</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Extension.ExtensionPoint</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>get_Owner</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundle)</signature>
                        <name>set_Owner</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Core.IBundle</signature>
                        <name>&lt;Owner&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>Owner</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Listener.IBundleListener</name>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Event.BundleEventArgs)</signature>
                        <name>BundleChanged</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Listener.IExtensionListener</name>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Event.ExtensionEventArgs)</signature>
                        <name>ExtensionChanged</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Listener.IServiceListener</name>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Event.ServiceEventArgs)</signature>
                        <name>ServiceChanged</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Provider.BundleAssemblyProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(System.Collections.Generic.KeyValuePair`2&lt;string,System.Reflection.Assembly&gt;)</signature>
                        <name>&lt;GetManagedAssemblies&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(System.Collections.Generic.KeyValuePair`2&lt;string,System.Reflection.Assembly&gt;)</signature>
                        <name>&lt;GetManagedAssemblies&gt;b__1</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Reflection.Assembly)</signature>
                        <name>AddAssembly</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Reflection.Assembly)</signature>
                        <name>AddShareAssembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>CheckHasBundleLib</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>CheckHasShareLib</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(object, System.ResolveEventArgs)</signature>
                        <name>CurrentDomainAssemblyResolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(string)</signature>
                        <name>GetAssembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(string)</signature>
                        <name>GetBundleLibAssembly</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(string)</signature>
                        <name>GetGacAssembly</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;System.Reflection.Assembly&gt;()</signature>
                        <name>GetManagedAssemblies</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(string)</signature>
                        <name>GetShareAssembly</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveAssembly</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,System.Reflection.Assembly&gt;</signature>
                        <name>AllBundleRefAssemblyDict</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,System.Reflection.Assembly&gt;</signature>
                        <name>AllShareRefAssemblyDict</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;string,System.Reflection.Assembly&gt;,System.Reflection.Assembly&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;string,System.Reflection.Assembly&gt;,System.Reflection.Assembly&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.ILog</signature>
                        <name>log</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Provider.BundleConfigProvider</name>
                <newname>j</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>int32(System.Collections.Generic.KeyValuePair`2&lt;string,System.Xml.XmlNode&gt;)</signature>
                        <name>&lt;LoadBundlesConfig&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(System.Collections.Generic.KeyValuePair`2&lt;string,System.Xml.XmlNode&gt;)</signature>
                        <name>&lt;SyncBundleConfig&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>CheckDllInWhiteList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Xml.XmlNode)</signature>
                        <name>GetBundleConfigAssemblyName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,System.Collections.Generic.IList`1&lt;System.Xml.XmlNode&gt;&gt;(System.Xml.XmlNode)</signature>
                        <name>GetBundleConfigExtensionDatas</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;(System.Xml.XmlNode)</signature>
                        <name>GetBundleConfigExtensionPoints</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(System.Xml.XmlNode)</signature>
                        <name>GetBundleConfigStartLevel</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundlesDirectory</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetBundlesUninstallDirectory</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;()</signature>
                        <name>GetConfigRootShareDll</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetShareLibsDirectory</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>LoadBundlesConfig</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadFrameworkConfig</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode(string)</signature>
                        <name>ReadBundleConfig</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveBundleConfig</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Xml.XmlNode)</signature>
                        <name>SyncBundleConfig</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>AssemblyName</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,System.Xml.XmlNode&gt;</signature>
                        <name>BundlesConfiguration</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;string,System.Xml.XmlNode&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;string,System.Xml.XmlNode&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;</signature>
                        <name>FrameworkConfiguration</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_ALL_TYPES_LOAD</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>OSGi_NET_ALLTYPES_LOAD</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_BUNDLE_CONFIG</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_BUNDLE_DIRECTORY_NAME</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_BUNDLE_STORAGE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_CONFIG</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_DEBUG_MODE</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_FCL_LIST</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_GUID_ASSEMBLY_NAME</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>OSGi_NET_IS_DEBUG_MODE</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_SCL_LIST</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_SHARELIB_DIRECTORY_NAME</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_SHARELIB_STORAGE</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_SINGLE_RUNNING</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>OSGi_NET_SINGLERUNNING</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_UNINSTALL_DIRECTORY_NAME</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OSGi_NET_UNINSTALL_STORAGE</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>StartLevel</name>
                        <newname>n</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Provider.BundleConfigProvider/&lt;&gt;c__DisplayClass6</name>
                <newname>j/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;CheckDllInWhiteList&gt;b__4</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>dllName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Service.IServiceReference</name>
                <methodlist>
                    <method>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetPropertyKeys</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetSercieContracts</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetService</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;()</signature>
                        <name>GetUsingBundles</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>SetProperties</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Service.IServiceRegistration</name>
                <methodlist>
                    <method>
                        <signature>OSGi.NET.Service.IServiceReference()</signature>
                        <name>GetReference</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>SetProperties</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Unregister</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Service.ServiceReference</name>
                <newname>k</newname>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Core.IBundleContext, string[], System.Collections.Generic.IDictionary`2&lt;string,object&gt;, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Core.IBundle()</signature>
                        <name>GetBundle</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetPropertyKeys</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetSercieContracts</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetService</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;OSGi.NET.Core.IBundle&gt;()</signature>
                        <name>GetUsingBundles</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>SetProperties</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Core.IBundleContext</signature>
                        <name>bundleContext</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>contracts</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,object&gt;</signature>
                        <name>properties</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>service</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Service.ServiceRegistration</name>
                <newname>l</newname>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Core.Root.IFramework, OSGi.NET.Core.IBundleContext, OSGi.NET.Service.ServiceReference)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Service.IServiceReference()</signature>
                        <name>GetReference</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>SetProperties</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Unregister</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Core.IBundleContext</signature>
                        <name>bundleContext</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Core.Root.IFramework</signature>
                        <name>framework</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>OSGi.NET.Service.ServiceReference</signature>
                        <name>reference</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.AssemblyResolver</name>
                <newname>m</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly(object, System.ResolveEventArgs)</signature>
                        <name>CurrentDomainOnReflectionOnlyAssemblyResolve</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetAssemblyFullName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetAssemblyName</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetAssemblyRequiredAssembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetAssemblyTitle</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>GetCustomAttributeData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetVendor</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>GetVersion</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], string, string)</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.Assembly</signature>
                        <name>assembly</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;System.Reflection.CustomAttributeData&gt;</signature>
                        <name>attributeDataList</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUNDLE_MANIFEST_REQUIRED_BUNDLE_VERSION</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>bundleLib</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>shareLib</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.BundleUtils</name>
                <newname>n</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ExtractBundleFile</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsAssemblyBelongsFcl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Mono.Cecil.AssemblyNameReference)</signature>
                        <name>RemoveAssemblyStrongName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.CustomAssemblyResolver</name>
                <newname>o</newname>
                <methodlist>
                    <method>
                        <signature>void(OSGi.NET.Utils.CustomAssemblyResolver/ResolveAssemblyDefinitionDelegate)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Mono.Cecil.AssemblyDefinition(Mono.Cecil.AssemblyNameReference)</signature>
                        <name>Resolve</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>OSGi.NET.Utils.CustomAssemblyResolver/ResolveAssemblyDefinitionDelegate</signature>
                        <name>resolveAssemblyDefinition</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.CustomAssemblyResolver/ResolveAssemblyDefinitionDelegate</name>
                <newname>o/a</newname>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(string, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>Mono.Cecil.AssemblyDefinition(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>Mono.Cecil.AssemblyDefinition(string)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.MonoAssemblyReflector</name>
                <newname>r</newname>
                <methodlist>
                    <method>
                        <signature>void(Mono.Cecil.AssemblyDefinition)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>OSGi.NET.Utils.MonoAttributeReflector(Mono.Cecil.CustomAttribute)</signature>
                        <name>&lt;GetAttributes&gt;b__1</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FileName</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Location</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;OSGi.NET.Utils.MonoAttributeReflector&gt;()</signature>
                        <name>GetAttributes</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;OSGi.NET.Utils.MonoTypeReflector&gt;()</signature>
                        <name>GetTypes</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Mono.Cecil.AssemblyDefinition</signature>
                        <name>_assembly</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>OSGi.NET.Utils.MonoAssemblyReflector/&lt;&gt;c__DisplayClass3`1</name>
                <newname>r/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Mono.Cecil.CustomAttribute)</signature>
                        <name>&lt;GetAttributes&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>expectedTypeName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.MonoAssemblyResolver</name>
                <newname>p</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Mono.Cecil.AssemblyDefinition</signature>
                        <name>assembly</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.MonoAttributeReflector</name>
                <newname>t</newname>
                <methodlist>
                    <method>
                        <signature>void(Mono.Cecil.CustomAttribute)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(Mono.Cecil.ParameterDefinition)</signature>
                        <name>&lt;get_Values&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(Mono.Cecil.CustomAttributeArgument)</signature>
                        <name>&lt;get_Values&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;()</signature>
                        <name>get_Values</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Mono.Cecil.CustomAttribute</signature>
                        <name>_attribute</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;</signature>
                        <name>_values</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Mono.Cecil.ParameterDefinition,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Mono.Cecil.CustomAttributeArgument,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;()</signature>
                        <name>Values</name>
                        <newname>a</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.MonoReflector</name>
                <newname>q</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>OSGi.NET.Utils.MonoAssemblyReflector(string)</signature>
                        <name>LoadAssembly</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>OSGi.NET.Utils.MonoTypeReflector</name>
                <newname>s</newname>
                <methodlist>
                    <method>
                        <signature>void(Mono.Cecil.TypeDefinition)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>OSGi.NET.Utils.MonoAttributeReflector(Mono.Cecil.CustomAttribute)</signature>
                        <name>&lt;GetAttributes&gt;b__3</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>OSGi.NET.Utils.MonoTypeReflector(Mono.Cecil.TypeReference)</signature>
                        <name>&lt;GetInterfaces&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;OSGi.NET.Utils.MonoAttributeReflector&gt;()</signature>
                        <name>GetAttributes</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;OSGi.NET.Utils.MonoTypeReflector&gt;()</signature>
                        <name>GetInterfaces</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Mono.Cecil.TypeDefinition</signature>
                        <name>_type</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Mono.Cecil.TypeReference,OSGi.NET.Utils.MonoTypeReflector&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>FullName</name>
                        <newname>a</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                        <newname>b</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>OSGi.NET.Utils.MonoTypeReflector/&lt;&gt;c__DisplayClass5`1</name>
                <newname>s/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Mono.Cecil.CustomAttribute)</signature>
                        <name>&lt;GetAttributes&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>expectedTypeName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>50</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>353</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>148</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties</description>
            <statistic>8</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events</description>
            <statistic>2</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>32</statistic>
            <statistic>64.00%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>146</statistic>
            <statistic>41.36%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>132</statistic>
            <statistic>89.19%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties Renamed</description>
            <statistic>3</statistic>
            <statistic>37.50%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events Renamed</description>
            <statistic>0</statistic>
            <statistic>0.00%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>32</statistic>
            <statistic>9.07%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>28</statistic>
            <statistic>7.93%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>14</statistic>
            <statistic>3.97%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'd'</description>
            <statistic>13</statistic>
            <statistic>3.68%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'e'</description>
            <statistic>10</statistic>
            <statistic>2.83%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'f'</description>
            <statistic>8</statistic>
            <statistic>2.27%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'g'</description>
            <statistic>6</statistic>
            <statistic>1.70%</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>